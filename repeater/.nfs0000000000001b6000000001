#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <termios.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
#include <sys/time.h>
#include <malloc.h>
#include <sys/msg.h>

#include "485communication.h"

int set_opt(int fd,int nSpeed,char nEvent){
	struct termios newtio;
	if (tcgetattr(fd,&newtio) != 0){
		perror("SetupSerial 1");
		return -1;
	}


	switch(nEvent){
		case 'O':
			newtio.c_cflag |= PARENB;
			newtio.c_cflag |= PARODD;
			newtio.c_iflag |= (INPCK | ISTRIP);
			break;
		case 'E':
			newtio.c_cflag |= PARENB;
			newtio.c_cflag &= ~PARODD;
			newtio.c_iflag |= (INPCK | ISTRIP);
			break;
		case 'N':
			break;
		default:
			break;
	}

	switch(nSpeed){
		case 2400:
			cfsetispeed( &newtio, B2400 );
			cfsetospeed( &newtio, B2400 );
			break;
		case 4800:
			cfsetispeed( &newtio, B4800 );
			cfsetospeed( &newtio, B4800 );
			break;
		case 9600:
			cfsetispeed( &newtio, B9600 );
			cfsetospeed( &newtio, B9600 );
			break;
		case 115200:
			cfsetispeed( &newtio, B115200 );
			cfsetospeed( &newtio, B115200 );
			break;
		default:
			cfsetispeed( &newtio, B9600 );
			cfsetospeed( &newtio, B9600 );
			break;
	}
	
	if (( tcsetattr(fd, TCSANOW,&newtio)) != 0){
		perror("com set error");
		return -1;
	}
	
	return 0;

}


/*
	函数名：int mater485_init
	功能：设置主485口到相应的参数
    返回：文件描述符fd
*/
int master485_init(void)
{
	int fd;
	char *usart = "/dev/ttyUSB0";
	struct termios newtio;

	if ((fd = open(usart, O_RDWR,0777)) < 0 ){
	printf("open %s failed!\n",usart);
	}
	else
		printf("open %s success!\n",usart);

	set_opt(fd,9600,'N');
	printf("set master485 to 9600 N 1 success!\n");
	
	return fd;	
}


/*
	函数名：int mater485_init
	功能：设置从485口到相应的参数
    返回：文件描述符fd
*/
int slave485_init(void)
{
	int fd;
	char *usart = "/dev/ttyUSB1";
	struct termios newtio;

	if ((fd = open(usart, O_RDWR,0777)) < 0 ){
	printf("open %s failed!\n",usart);
	}
	else
		printf("open %s success!\n",usart);

	set_opt(fd,9600,'N');
	printf("set slave485 to 9600 N 1 success!\n");
	
	return fd;	
}

/*
	函数名： 通过master485发送n个字符
	参数：int fd 文件描述符，int n 要发送的字符个数，const char * data指向字符的指针。
*/
void master485_send_chars(int fd,int n,const char *data)
{
		write(fd,data,n);
}


/*
函数：主485接收线程
功能：接收主485上的现场仪表信息
*/
extern pthread_t master_thread;
char rev_buf[MAST485_BUF_SIZE] = {0x0};
char rev_tmp,*m485_write,*m485_read,*msg,*msg_p;
extern char msg_box;
extern struct msg_st msg_set;
char *m485_msg;
void master_input_pthread(void)
{
	m485_write = &rev_buf[0];
	m485_read = m485_write;
	while(1)
	{
		read(master485_fd,&rev_tmp,1);
		if( &rev_buf[MAST485_BUF_SIZE] == m485_write )
			m485_write = &rev_buf[0];
		*m485_write++ = rev_tmp;

		if( ('\n' == *(m485_write-1) ) && '\r' == *(m485_write-2) )
		{
			msg = (char*)malloc(MAST485_BUF_SIZE);
			memset(msg,0,sizeof(char)*MAST485_BUF_SIZE);
			msg_p = msg;
			while(m485_write != m485_read)
				*msg_p++ = *m485_read++;
			if( -1 == msgsnd(msg_box,msg,MAST485_BUF_SIZE,0) )
				printf("msgsed fail!\n");
			free(msg);
		}
	}
}

const char cmd[8] = {
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37
};
char *m485_msg;
void master485_test()
{
	while(1)
	{
		m485_msg = (char*)malloc(MAST485_BUF_SIZE);
		memset(m485_msg,0,sizeof(char)*MAST485_BUF_SIZE);
		msgrcv(msg_box,m485_msg,MAST485_BUF_SIZE,0,0);
		printf("m485_msg:%s!\n",m485_msg);
		free(m485_msg);
	}
	close(master485_fd);
}


