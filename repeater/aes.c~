#include <string.h>

unsigned char  AES_W[11][4][4];

//若没有进行过用户密钥配置，则aes_key就取默认值AES_KeyDefault。
const char AES_KeyDefault[17]="0123456789abcdef";
//char AES_Key[17]="0123456789abcdef";

//本版本还没有用到AES_IV
const char AES_IVDefault[17]="0123456789abcdef";
char AES_IV[17]="0123456789abcdef";


unsigned char* AES_Padding_PKCS7(unsigned char* dest);
unsigned char* AES_CipherBuffer(unsigned char* input);	
unsigned char* AES_Cipher16Byte(unsigned char* input); //AES加密16字节数据
void AES_AddRoundKey(unsigned char state[][4], unsigned char k[][4]);
void AES_SubBytes(unsigned char state[][4]);
void AES_ShiftRows(unsigned char state[][4]);
void AES_MixColumns(unsigned char state[][4]);
unsigned char AES_FFmul(unsigned char a, unsigned char b);
void AES_KeyExpansion(unsigned char* aeskey);


unsigned char* AES_InvCipherBuffer(unsigned char* input, int length);			
unsigned char* AES_InvCipher(unsigned char* input);
void AES_InvShiftRows(unsigned char state[][4]);
void AES_InvSubBytes(unsigned char state[][4]);
void AES_InvMixColumns(unsigned char state[][4]);
unsigned char* AES_InvPadding_PKCS7(unsigned char* dest);

const unsigned char AES_Sbox[] =
{
/*0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f */ 
0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76, /*0*/  
0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0, /*1*/
0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15, /*2*/ 
0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75, /*3*/ 
0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84, /*4*/ 
0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf, /*5*/
0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8, /*6*/  
0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2, /*7*/ 
0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73, /*8*/ 
0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb, /*9*/ 
0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79, /*a*/
0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08, /*b*/
0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a, /*c*/ 
0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e, /*d*/
0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf, /*e*/ 
0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16  /*f*/
};


const unsigned char AES_InvSbox[] = 
{
/*0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f  */  
0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb, /*0*/ 
0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb, /*1*/
0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e, /*2*/ 
0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25, /*3*/ 
0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92, /*4*/ 
0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84, /*5*/ 
0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06, /*6*/ 
0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b, /*7*/
0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73, /*8*/ 
0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e, /*9*/
0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b, /*a*/
0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4, /*b*/ 
0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f, /*c*/ 
0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef, /*d*/ 
0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61, /*e*/ 
0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d  /*f*/
};




//对16的整数倍的字节数据进行AES加密
//加密后的数据可能出现‘\0’（0x00），  
unsigned char* AES_CipherBuffer(unsigned char* input)					 
{
	unsigned char* in = (unsigned char*) input;

	int i;
	int length;

	length = strlen((const char *)(const char*)input);

	if(!length)
	{
		while(*(in+length++));

		in = (unsigned char*) input;
	}



	for(i=0; i<length; i+=16)
	{
		AES_Cipher16Byte(input+i);
	}

	return input;
}


 //AES加密16字节数据
unsigned char* AES_Cipher16Byte(unsigned char* input)
{
	unsigned char state[4][4];

	int i,r,c;
	
	for(r=0; r<4; r++)
	{
		for(c=0; c<4 ;c++)
		{
			state[r][c] = input[c*4+r];
		}
	}

	AES_AddRoundKey(state,AES_W[0]);

	for(i=1; i<=10; i++)
	{
		AES_SubBytes(state);

		AES_ShiftRows(state);

		if(i!=10) 
		     AES_MixColumns(state);

		AES_AddRoundKey(state,AES_W[i]);
	}

	for(r=0; r<4; r++)
	{
		for(c=0; c<4 ;c++)
		{
			input[c*4+r] = state[r][c];
		}
	}

	return input;
}


//（轮密钥加变换）单来说就是逐字节相加，有限域GF(28)上的加法是模2加法，即异或
void AES_AddRoundKey(unsigned char state[][4], unsigned char k[][4])
{
	int r,c;

	for(c=0; c<4; c++)
	{
		for(r=0; r<4; r++)
		{
			state[r][c] ^= k[r][c];
		}
	}
}


//
void AES_SubBytes(unsigned char state[][4])
{
	int r,c;

	for(r=0; r<4; r++)
	{
		for(c=0; c<4; c++)
		{
			state[r][c] = AES_Sbox[state[r][c]];
		}
	}
}

 

//
void AES_ShiftRows(unsigned char state[][4])
{
	unsigned char t[4];

	int r,c;

	for(r=1; r<4; r++)
	{
		for(c=0; c<4; c++)
		{
			t[c] = state[r][(c+r)%4];
		}
		for(c=0; c<4; c++)
		{
			state[r][c] = t[c];
		}
	}
}



//
void AES_MixColumns(unsigned char state[][4])
{
	unsigned char t[4];

	int r,c;

	for(c=0; c< 4; c++)
	{
		for(r=0; r<4; r++)
		{
			t[r] = state[r][c];
		}
		for(r=0; r<4; r++)
		{
			state[r][c] = AES_FFmul(0x02, t[r])
				^ AES_FFmul(0x03, t[(r+1)%4])
				^ AES_FFmul(0x01, t[(r+2)%4])
				^ AES_FFmul(0x01, t[(r+3)%4]);
		}
	}
}


//
unsigned char AES_FFmul(unsigned char a, unsigned char b)
{
	unsigned char bw[4];
	unsigned char res=0;

	int i;

	bw[0] = b;

	for(i=1; i<4; i++)
	{
		bw[i] = bw[i-1]<<1;

		if(bw[i-1]&0x80)
		{
			bw[i]^=0x1b;
		}
	}

	for(i=0; i<4; i++)
	{
		if((a>>i)&0x01)
		{
			res ^= bw[i];
		}
	}

	return res;
}


//扩展后的数据最后不可能是'\0'.加密之前的，strlen仍然可用。
//单次加密函数Cliper()一次只能加密16字节数据。
 //若数据长度不是16字节的整数倍，
 //则将数据按照XXXX方式进行扩充成16字节的整数倍，
 //参考1：http://www.cnblogs.com/mingcn/archive/2010/10/31/aes_c.html
 //参考2：http://blog.sina.com.cn/s/blog_60cf051301015orf.html     
unsigned char* AES_Padding_PKCS7(unsigned char* dest)
{

	int ram = 0;
	int destlen=0;
	int i = 0;

	destlen = strlen((const char *)dest);	

	ram = destlen%16;

	if(ram == 0)   
	{
		ram=16;
		for(i=0; i<ram; i++)
		{
			 dest[destlen+i]=ram;  //后面补充0x10；
		}
	}
	else if(ram > 0)
	{
		ram=16-ram;
		for(i=0; i<ram; i++)
		{
		   dest[destlen+i]=ram;
		}		
	}

	destlen += ram;

	dest[destlen]='\0';  //应该是结束标志

	return dest;
}



//产生11组各128位的密匙 共11*4*4字节；存放于AES_W中
//其中第0组为输入密钥本身 
// 其后第n组第i列 为 第n-1组第i列 与 第n组第i-1列之和（模2加法，1<= i <=3）
void AES_KeyExpansion(unsigned char* aeskey) 
{
	int i,j,r,c;
	
	unsigned char rc[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

	for(r=0; r<4; r++)
	{
		for(c=0; c<4; c++)
		{
			AES_W[0][r][c] = aeskey[r+c*4];
		}
	}

	for(i=1; i<=10; i++)
	{
		for(j=0; j<4; j++)
		{
			unsigned char t[4];

			for(r=0; r<4; r++)
			{
				t[r] = j ? AES_W[i][r][j-1] : AES_W[i-1][r][3];
			}

			if(j == 0)
			{
				unsigned char temp = t[0];

				for(r=0; r<3; r++)
				{
					t[r] = AES_Sbox[t[(r+1)%4]];
				}

				t[3] = AES_Sbox[temp];
				t[0] ^= rc[i-1];
			}

			for(r=0; r<4; r++)
			{
				AES_W[i][r][j] = AES_W[i-1][r][j] ^ t[r];
			}
		}
	}
}



//解密一串数据，要指定长度。以防加密后的数据有‘\0’。
 //这个长度不能直接用strlen((const char *)input), 因为input是加密后的数组，有可能出现0x00，这样就影响实际长度。
 //length应该等于最原先的数据经过扩充后的长度。！！！！！要非常值得注意	！！！！
unsigned char* AES_InvCipherBuffer(unsigned char* input, int length)			
{													
	unsigned char* in = (unsigned char*) input;
	int i;

	for(i=0; i<length; i+=16)
	{

		AES_InvCipher(in+i);

	}

	return input;
}


//一次只能解密16个字节
unsigned char* AES_InvCipher(unsigned char* input)
{
	unsigned char state[4][4];
	int i,r,c;

	for(r=0; r<4; r++)
	{
		for(c=0; c<4 ;c++)
		{
			state[r][c] = input[c*4+r];
		}
	}

	AES_AddRoundKey(state, AES_W[10]);

	for(i=9; i>=0; i--)
	{
		AES_InvShiftRows(state);
		AES_InvSubBytes(state);
		AES_AddRoundKey(state, AES_W[i]);

		if(i)
		{
			AES_InvMixColumns(state);
		}
	}
	
	for(r=0; r<4; r++)
	{
		for(c=0; c<4 ;c++)
		{
			input[c*4+r] = state[r][c];
		}
	}

	return input;
}



//
void AES_InvShiftRows(unsigned char state[][4])
{
	unsigned char t[4];
	int r,c;

	for(r=1; r<4; r++)
	{
		for(c=0; c<4; c++)
		{
			t[c] = state[r][(c-r+4)%4];
		}
		for(c=0; c<4; c++)
		{
			state[r][c] = t[c];
		}
	}
}



void AES_InvSubBytes(unsigned char state[][4])
{
	int r,c;

	for(r=0; r<4; r++)
	{
		for(c=0; c<4; c++)
		{
			state[r][c] = AES_InvSbox[state[r][c]];
			//state[r][c] =  aesss[1];
		}
	}
}




//
void AES_InvMixColumns(unsigned char state[][4])
{
	unsigned char t[4];
	int r,c;

	for(c=0; c< 4; c++)
	{
		for(r=0; r<4; r++)
		{
			t[r] = state[r][c];
		}
		for(r=0; r<4; r++)
		{
			state[r][c] = AES_FFmul(0x0e, t[r])
						^ AES_FFmul(0x0b, t[(r+1)%4])
						^ AES_FFmul(0x0d, t[(r+2)%4])
						^ AES_FFmul(0x09, t[(r+3)%4]);
		}
	}
}


// 解密过的数据内部已经肯定没有'\0'LE .
unsigned char* AES_InvPadding_PKCS7(unsigned char* dest)
{
   unsigned char* data;

   data = (unsigned char *)strstr((char *)&dest,(char *)"</root>");
   
   if(data != NULL)
   {
   		*(data +7) = '\0';
   }
   	return dest;
}

